#https://github.com/Taloohi/Vigenere-Cipher


#Jdp1
#idioma: Inglés
#clave: LUZ
text1 = "CUMDILHUQPCRLNXAYNQGZWQZCYECILNLXANNGCQZFNRSSSUSEBQPUSPHREIOFVKTMGEBDGCBECLDXZEUNCJDCJDEOZWFXMFNNEZNWDDMSZCSFHKPMRLLZYMNXCRAUHOQGTFDDILPMHXJKPLZYMNXQZCYLLSKZWJEBDDSREYLTHZHUXHBHNBHDHNEXHQZHNOKEZNCUJYIVWYCRYZMFDAYQDIMEIQPPDCMDXIQPUCGUMNYCXUKHUQPORPMZEYBSHHBODNUKWYCNLXANNGCQLFDINNCNHZHHYQGTWGTNDYWQJJSDNGPPHNNHXMETFDDGZVCMRNGPGHYUBNYRDCAWYZYXCPGZYXRLLZYMNXJZJGDYNSZXDNLXANSSYLTHZALNAYQWSHXJKPGDYNDOWQJJSZPHCUKPRSZLSTIMLNSLWJCYBZPDCCMRNGPZHWYRHCSSITENGPXDNLXANHZHJPSHDUMTHSCUBEUAWYOCIAWYLLHCOCEQCBFFSEISCUBPXHRCSLFBFLQPHBTYRDOBSURFEZDBNCVHEWNTHZYXNEBDCWQJJSZWTCLDYWXLLDFMDOZNCNGPLZYMNXMLLEHYASCUBTHFLHCALNDYBFNHYASSYOPLOPNQLNNCMCTZETWTWNQLHRZGVLLDLNSLWJDUQPNXACBLFKJWZCLHPXNFNTDCMRUSCIILHSSUSTMCTMFFCRPXZDUKPAHECLLNDQCKPNGLNSSYTDYQTMSCCBVYCTHSZXNHHKZUCTHFZLNAYMTHFHBDYCSLLQTPDDURLHDXUHWUSEUBSGDYNGZQDGYQZHDSCFSJQZZHWYDIULAFDEBDHUMYUBCSVZLLELZGYKWYCLOSZGZECBLFKJVDEQDPHBZGOFNDCMVTNGZOSFMDCCMEYQLWSTIMDNZCNHYAECILLLNFHCEBDFMDZZQLHRZGVLLDDWZXMGLMFCIVYCMEYQYUSTIMLFKJNGPLDHYQPGHWFHZHQLHRZGVLLDLNSLWJDCMEBDQCQDNRTRLZHSSMNQNGTMLLLJDUHYWQPURPIUPLSSCRDULPNHXYECULPCMTHIFHDGYMOIQXWZQYDCYKPURPXCLNZDBNHCMRNGLNHEBZOWNWFDNNDOGNCYSSUMOITMFDEBDYOLMYQZZRLGOWYRZZQLHRZGVLLDEBZEKTLLSPLSSUMTNGLXHYNGPMZXYPFUQEYQZZSSYOCYUTITDSDLLBCSOEIKZWJPLVLMOLLSTWTWUQWSRFWBPMRQOKALNNOQTHFLHDDNHXUSPXTDGHWFHZHAPZNCYHEQZDNZVYMOIVYVXLOSSIQTNHPMZYXBCSOEIVLFKHURPMSTGZEYCMSSSYTDZDOYQLFAFLDLONQCMGYRECFLNHZHEMCSZBZGYZNWQFYCZPDCORXCKWCNYVXUOMP"

#Jdp2
#idioma: Español
#clave: AGUA
text2 = "EYKANGBAFUMMAQCZAJJUNIJNTXUTOJYCORKRAJYMAZYRIGFSASCTAXCOAIBINGKARGBACKMFRKHTEGFCOXJNABCRUYKORRCLLUHESJYEUXJSSKAUNNUEXVFICGXOEYÑEMÑYRCUFESKFMISCSTXJDEYUNIJUDSGFVAJJRIQFASKÑRAZUDERUSCGMILQUSGAUNTKNYMGÑERÑULDKKROZYCCÑJNTKNTRGKIDUNYEWOIPUNDEXYSPÑMACÑJNAYCSTÑXAIRKREYWINJCBLKNPAXULOYKACÑYNTKNMAYARABYSCUHCOBCDEYÑASKGANGÑENJMEMUNUNGKRIRYRAKHTRKAADKGATKMIAQYSHGUVASTADUBEMUNCORKRAJJYPGAADUGILQJNEYXEMGNCAXCLLGNQUKYMPKTARGHALQYGAXSAYYYGUÑMANQFEGGHDOJORASÑELGNPRURIMGNOCNJSERUNAYFLEMURASGILQJNEYXEGAUNTKNDUXUNTKFASVMOXÑGASICNCUNEMGHASKHCUGHTOGÑESZMAPÑXOSNYMOYUDQACRIJJMIQFONKNPAXULOYGESKNDERURZUSABXCLAJYMAYMECÑVIRKGOSKLUIVJSDKMESVCRAICONGNISZCDAJORASÑELUNMEYYSDKUBRÑFAJAHIONUEXVFICGXOIQFAEYÑAMUNGEYÑIOSUNDUFACUGPRGXEMGNEQACPOYBAASUDIJJELXYSPUHSAHFEDKNANÑXADNUREIJRDGXOQAYELMJBIKMNONUREVURTÑXOCGNISKCSMÑFLOSYSDKGASIURIQFASAHASICFRGNQUKXESMMANGMAEQDUEBYSESYLCUHGRKNOAJYMAYYLEOYCUZCVOKNTAGWTIBUNDUFAFGVRIIUCIUHNAICONGFDEZJDAYYSTGNCAZYGOXCASJYPRUXUCZJSRKNPIXUDOXYSMGÑERÑULDKKROZYCCÑJNYZYSTXUPIJJSEQGINÑNTRUBAAMMADKWIDUYLCUGPRUGISUXELGNEMVMESGNESVUNOQUSPGMAAJUPTGMSUYFINKUSDKKROJOCCÑJNAQUFAHMICGWIOSXEEYÑOSRUTEXCALKNYANUYDUNEMVMESGNQUKZABXCCASMESVCRAJJREYYNEYKANG"

#Jdp3
#idioma: Francés
#clave: PARIS
text3 = "IOLBSRODUWCCVQDNAKZGXSDWAHOLXWJTVBJTQLILGEUIFHLRDAALVKZXNFQKTDVEMWAEIVXRVDJPICMKKIIWDDGLMKXGEWJTNKIIJECUGBEEBHGETQKAEMQJJSUCUDVZLWHTJWMSAZVVTVVVMIRRVKBIJAAQLVIDWODUWBAZADTUIAUDLCMYJEJMHXDVUADLFOAHTVAGCTLVWKIJQGCAJAWOPIMUXSVLWAAWIUDNUWFIICAWHTGZGEAXMSEAIBAGDVKWUOPMJXNZBAPLRTAGERCKHITWJDNRDAGUJKGCFZVWBEEBLTLVBJPVRQDSEGTSREDMFISLVWHECMUIIFVVTVFAIJEJBADNJMLCOJZWEOEAWHLVLWREDJJTSVTGCLRDWGSZWFDFWQUXECTWFURBJTCRAVTPEMMBOEQWPTPXAFUVAGCTZLWCTZNATSGIJBICMKRLZMFISVBDTSVUHAOPMKSUEUSGCYMSJXRVABALFKPUMIYTSGMCXNVALPLVZLTLVTATUGZWHUDMVTCVAUDNKIEXNRBADNJMKIFVZETEKCFTNFBWSIENGGMRBADNVALTNMWQTERTGGGRVAHAKQGCMFVVXACMVTLRASCTVWEHMRQKIAELAHQLMDTSVFHTRKAUWIEWAHSVTSCCVVLHUITSEIJBWSUMQJJSGTMHIVCJHMVLWRIEADDCRCPHOEBJPPGMDTSRTGGDIMHDUIINDIIMPERZUWAELZACQLQWIUUMKJRCMIJIMIDTNKLMCESWMRLVEZPTJIHEPRAIJEJBADNUMKTMVZDPPRVAFUVQFHIJBWCTCMKPUKWJXTVADDCRTWHQLQJTFLBWCTCMPXSKMFREUMUDNKIEXNRBADNJQFIEIPMBAZVWH"

A_english = [
    0.08167, # A
    0.01492, # B
    0.02782, # C
    0.04253, # D
    0.12702, # E
    0.02228, # F
    0.02015, # G
    0.06094, # H
    0.06996, # I
    0.00153, # J
    0.00772, # K
    0.04025, # L
    0.02406, # M
    0.06749, # N
    0.07507, # O
    0.01929, # P
    0.00095, # Q
    0.05987, # R
    0.06327, # S
    0.09056, # T
    0.02758, # U
    0.00978, # V
    0.02360, # W
    0.00150, # X
    0.01974, # Y
    0.00074  # Z
]


A_spanish = [
    0.1253, # A
    0.0142, # B
    0.0468, # C
    0.0586, # D
    0.1368, # E
    0.0069, # F
    0.0101, # G
    0.0070, # H
    0.0625, # I
    0.0044, # J
    0.0000, # K
    0.0497, # L
    0.0315, # M
    0.0671, # N
    0.031,  # Ñ
    0.0868, # O
    0.0251, # P
    0.0088, # Q
    0.0687, # R
    0.0798, # S
    0.0463, # T
    0.0393, # U
    0.0090, # V
    0.0001, # W
    0.0022, # X
    0.0090, # Y
    0.0052  # Z
]

A_french= []

dic = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
dicñ = "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ"


#Cambiar aquí frecuencias y diccionarios

A= A_spanish
text= text2
alpha= dicñ




def ceasar(text):
    Ai = [[0 for x in range(1)] for y in range(int(26))]
    W = []
    prod = []

    for i in range(0,26):
        Ai[i] = A[i::]+A[:i:] #circular shifts are added to 2D array
        W.append(text.count(alpha[i])/float(len(text))) #Vector W is created as specified

    
    for i in range(0,26):
        summation = 0
        for j in range(0,25):
            summation += W[j]*Ai[i][j]
        prod.append(summation)

    location = prod.index(max(prod))

    key = alpha[location::]+alpha[:location:]

    return location


displacement = []

for i in range(0,21):
    displacement.append(text[i::]+text[:i:])

N = [0]

for i in range(1,len(displacement)):
    sum = 0
    for j in range(0,len(text)):
        if displacement[i][j] == text[j]:
            sum += 1
    N.append(sum)

largest = max(N)

first = max(N)
second = 0

for i in range(0,len(N)):
    if N[i] > second and N[i] != max(N):
        second = N[i]
        
def gcd(x, y):
    while y != 0:
        (x, y) = (y, x % y)
    return x

length = gcd(N.index(first),N.index(second))

#split = [text[i:i+len(text)] for i in range(0, len(text), len(text))]

parts = [['' for x in range(1)] for y in range(int((length)))]

limit = len(text) - len(text)%length

for i in range(0,limit,length):
    for j in range(0,length):
        parts[j].append(text[i + j])

for i in range(limit,len(text)):
    parts[i-limit].append(text[i])

strings = [['' for x in range(1)] for y in range(int((length)))]

for i in range(0,length):
    strings[i] = ''.join(parts[i])

key = []

for i in range(0,length):
    key.append(ceasar(strings[i]))


stri = ""
for i in key[::-1]:
    stri += alpha[i]

print("Clave: " + stri)